services:
  # PostgreSQL数据库服务
  postgres:
    image: postgres:14
    platform: linux/amd64
    container_name: edm-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: amt_mail_system
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      # 使用本地目录而不是Docker卷，避免损坏问题
      - ./data/postgres:/var/lib/postgresql/data
      - ./db_init_scripts:/docker-entrypoint-initdb.d
      - ./data/backups:/backups
    restart: unless-stopped
    networks:
      - edm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d amt_mail_system"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # 优雅关闭设置
    stop_grace_period: 10s
    stop_signal: SIGINT
 


  # 后端API服务
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      no_cache: true
    container_name: edm-backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-amt_mail_system}
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST_TEST: postgres
      DB_NAME_TEST: amt_mail_test
      DB_USER_TEST: postgres
      DB_PASSWORD_TEST: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_KEY_PREFIX: "edm:"
      JWT_SECRET: RXRmasE4X32fkDEwAbDiKzE7NyjPfWtC
      JWT_EXPIRES_IN: 24h
      DB_FORCE_SYNC: false
      SCHEDULER_ENABLED: true
      SCHEDULER_INTERVAL: 1000
      MAX_CONCURRENT_CAMPAIGNS: 5
      EMAIL_SEND_RATE_LIMIT: 100
      QUEUE_NAME: email_sending
      QUEUE_CONCURRENCY: 10
      QUEUE_RETRY_ATTEMPTS: 3
      QUEUE_RETRY_DELAY: 5000
      SERVICE_FREEZE_THRESHOLD: 10
      SERVICE_FREEZE_DURATION: 3600000
      FIXED_SENDER_EMAIL: tony@glodamarket.fun
      FIXED_SENDER_NAME: "EDM System UAT"
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: tony@glodamarket.fun
      SMTP_PASS: your_app_password_here
      ENGAGELAB_API_USER: api-glodamarket.fun
      ENGAGELAB_API_KEY: 63b81ba85732f89bde0ac9643d7bb868
    volumes:
      - ./src/backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - edm-network
    command: npm run dev

  # 前端React服务
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: edm-frontend
    environment:
      PORT: 3001
      # 在Docker环境中，前端需要通过代理访问后端，或使用相对路径
      REACT_APP_API_BASE_URL: /api
      GENERATE_SOURCEMAP: false
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - edm-network
    command: npm start

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: edm-nginx
    ports:
      - "3001:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - edm-network

  # Redis服务
  redis:
    image: redis:7-alpine
    container_name: edm-redis
    ports:
      - "6379:6379"
    volumes:
      # 使用本地目录
      - ./data/redis:/data
    restart: unless-stopped
    networks:
      - edm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --save 60 1000



  # 数据库备份服务
  postgres-backup:
    image: postgres:14
    platform: linux/amd64
    container_name: edm-postgres-backup
    environment:
      PGPASSWORD: postgres
    volumes:
      - ./data/backups:/backups
      - ./scripts:/scripts
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - edm-network
    profiles:
      - backup
    command: |
      bash -c "
        echo 'Starting backup service...'
        while true; do
          echo 'Creating backup at $(date)'
          pg_dump -h postgres -U postgres -d amt_mail_system > /backups/backup_$(date +%Y%m%d_%H%M%S).sql
          echo 'Backup completed'
          sleep 3600  # 每小时备份一次
        done
      "

networks:
  edm-network:
    driver: bridge  