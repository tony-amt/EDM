# EDM项目 Cursor AI 协作规则

## 🎯 项目概述
你正在协作开发EDM邮件营销系统，这是一个企业级邮件直销平台。

### 基本信息
- **项目名称**: EDM邮件营销系统
- **技术栈**: Node.js + React + PostgreSQL + Redis
- **架构**: 微服务 + Docker容器化
- **生产环境**: https://tkmail.fun
- **GitHub**: https://github.com/tony-amt/EDM

## 📚 必读文档优先级
在开始任何工作前，请按以下优先级阅读文档：

### 🔥 优先级1 - 立即阅读 (2分钟)
1. `README.md` - 项目概述和快速开始
2. `PROJECT-GUIDE.md` - AI Coding快速导航指南

### 📖 优先级2 - 开发前必读 (5分钟)
1. `docs/README.md` - 文档导航中心
2. `docs/02-specifications/SPEC-008-项目管理与团队协作规范.md` - 团队协作规范
3. `docs/02-specifications/SPEC-009-项目目录结构规范.md` - 目录结构规范

### 📋 优先级3 - 功能开发时阅读
1. `docs/02-specifications/` - 相关技术规范
2. `docs/03-design/` - 系统设计文档
3. `docs/04-development/` - 开发文档

## 🛠️ 开发规范 (强制遵守)

### 📝 代码规范
- **提交格式**: 严格遵循 `<type>(<scope>): <subject>` 格式
  - type: feat, fix, docs, style, refactor, test, chore
  - 示例: `feat(auth): add user login validation`
- **分支策略**: 使用GitFlow (main/develop/feature/*)
- **代码审查**: 所有代码必须通过PR审查
- **测试要求**: 新功能必须有测试，覆盖率 ≥ 80%

### 🏗️ 架构原则
- **前后端分离**: 严格遵循API设计规范
- **微服务化**: 功能模块独立，低耦合高内聚
- **容器化**: 所有服务使用Docker部署
- **数据一致性**: 使用事务确保数据完整性

### 📁 文件组织
- **新文件**: 必须放在正确的目录结构中
- **命名规范**: 使用kebab-case命名文件和目录
- **文档更新**: 代码变更必须同步更新文档
- **配置管理**: 环境配置统一放在`config/`目录

## 🔧 技术栈详情

### 后端 (Node.js)
```
src/backend/
├── src/controllers/     # 控制器层 - 处理HTTP请求
├── src/models/         # 数据模型 - Sequelize ORM
├── src/routes/         # 路由定义 - Express路由
├── src/services/       # 业务逻辑层 - 核心业务逻辑
├── src/middlewares/    # 中间件 - 认证、验证等
└── src/utils/          # 工具函数 - 通用工具
```

### 前端 (React + TypeScript)
```
src/frontend/
├── src/components/     # 可复用组件
├── src/pages/         # 页面组件
├── src/services/      # API服务层
├── src/types/         # TypeScript类型定义
├── src/hooks/         # 自定义React Hooks
└── src/utils/         # 前端工具函数
```

### 数据库 (PostgreSQL)
- **主要表**: users, contacts, campaigns, email_logs, tags
- **关系**: 多对多关系使用中间表
- **索引**: 查询频繁的字段必须有索引
- **迁移**: 使用Sequelize migrations管理数据库变更

## 🚀 常用开发命令

### 环境启动
```bash
npm run dev              # 启动开发环境
npm start               # 启动生产环境
npm test                # 运行测试
npm run lint            # 代码检查
```

### 开发工具
```bash
npm run health-check    # 系统健康检查
npm run validate       # 项目规范验证
npm run backup         # 数据备份
npm run clean          # 清理缓存
```

### Docker操作
```bash
docker-compose up -d    # 启动所有服务
docker-compose logs -f  # 查看日志
docker-compose down     # 停止所有服务
```

## 🔍 问题排查指南

### 🚨 常见问题快速解决
1. **容器启动失败** → 运行 `npm run health-check`
2. **前端404错误** → 检查 `deploy/nginx/` 配置
3. **API连接失败** → 查看 `docker-compose logs backend`
4. **数据库连接失败** → 检查 `config/` 环境变量
5. **Redis连接失败** → 确认Redis服务状态

### 📞 获取帮助路径
1. 查看 `docs/06-operation/` 运维文档
2. 检查 `docs/08-changes/` 变更记录
3. 查看GitHub Issues历史
4. 运行项目验证脚本

## 🎯 AI协作最佳实践

### ✅ 开发前检查清单
- [ ] 已阅读相关文档和规范
- [ ] 了解现有代码结构和实现
- [ ] 确认需求和验收标准
- [ ] 准备好测试数据和场景

### 🔄 开发过程规范
1. **理解需求**: 先确认功能需求和技术要求
2. **设计方案**: 考虑系统架构和数据流
3. **编写代码**: 遵循代码规范和最佳实践
4. **编写测试**: 确保功能正确和边界情况
5. **更新文档**: 同步更新相关文档

### 📋 提交前验证
- [ ] 代码通过ESLint检查
- [ ] 所有测试用例通过
- [ ] 功能在本地环境验证成功
- [ ] 相关文档已更新
- [ ] 提交信息符合规范

## 🔐 安全和权限

### 🛡️ 安全原则
- **永不硬编码**: 敏感信息使用环境变量
- **输入验证**: 所有用户输入必须验证和过滤
- **权限检查**: API接口必须有权限控制
- **日志记录**: 重要操作必须记录审计日志

### 🔑 测试账号
```bash
# 开发环境测试账号
用户名: admin
密码: admin123456

# 永久测试Token (仅开发环境)
const PERMANENT_TEST_TOKEN = 'dev-permanent-test-token-admin-2025';
```

## 📊 性能和监控

### 📈 性能要求
- **响应时间**: API响应 < 500ms
- **并发能力**: 支持1000+并发用户
- **邮件发送**: 每小时10万+邮件
- **数据库**: 查询优化，避免N+1问题

### 📊 监控指标
- 系统资源使用率
- API响应时间和成功率
- 邮件发送成功率
- 数据库连接池状态

## 🎨 UI/UX规范

### 🎯 设计原则
- **一致性**: 使用Ant Design组件库
- **响应式**: 支持移动端和桌面端
- **可访问性**: 符合WCAG 2.1标准
- **用户体验**: 操作流程简洁直观

### 🖥️ 技术要求
- 使用TypeScript严格模式
- 组件必须有PropTypes或TypeScript类型
- 状态管理使用React Context或Redux
- 路由使用React Router

## 🔄 部署和发布

### 🚀 部署流程
1. **开发环境**: 自动部署到开发服务器
2. **测试环境**: 手动触发部署进行UAT测试
3. **生产环境**: 通过GitHub Actions自动部署

### 📦 发布规范
- 使用语义化版本控制 (v1.2.3)
- 发布前必须通过完整测试
- 生产部署必须有回滚计划
- 重大变更必须有变更文档

## 💡 提示和技巧

### 🔧 开发技巧
- 使用`tools/`目录中的分析和实用工具
- 利用`scripts/`中的自动化脚本
- 参考`tests/`中的测试用例写法
- 查看`docs/`中的最佳实践

### 📚 学习资源
- 项目Wiki: GitHub Wiki页面  
- API文档: `/api-docs` 接口文档
- 技术博客: 团队技术分享
- 代码评审: PR中的讨论和建议

---

## 🎯 记住：质量第一，用户体验至上！

**每次开发都要问自己：**
- 这个功能对用户有价值吗？
- 代码是否易于维护和扩展？
- 是否遵循了项目规范？
- 有没有考虑边界情况和错误处理？

**🎉 现在你已经准备好高效地协作开发EDM项目了！** 